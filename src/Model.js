/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { createRef, useEffect, useMemo, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { MathUtils, Vector3 } from "three";
import { useControls } from "leva";

const targetAmount = 20;

export default function Model(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF(
    "https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/low-poly-spaceship/model.gltf"
  );

  const targets = useRef([]);
  const targetPositions = useMemo(
    () =>
      [...Array(targetAmount)].map(() =>
        [...Array(3)].map((_) => MathUtils.randFloatSpread(50))
      ),
    []
  );

  const { selected } = useControls({
    selected: {
      value: 1,
      min: 1,
      max: 20,
      step: 1,
    },
  });

  useEffect(() => {
    group.current.matrix.lookAt(
      group.current.getWorldPosition(new Vector3()),
      targets.current[selected - 1].getWorldPosition(new Vector3()),
      new Vector3(0, 1, 0)
    );

    group.current.matrix.decompose(
      group.current.position,
      group.current.quaternion,
      group.current.scale
    );
  }, [selected]);

  return [
    <axesHelper args={[10]} />,
    <>
      <group ref={group} {...props} dispose={null}>
        <mesh geometry={nodes.Cube005.geometry} material={materials.Mat0} />
        <mesh geometry={nodes.Cube005_1.geometry} material={materials.Mat1} />
        <mesh geometry={nodes.Cube005_2.geometry} material={materials.Mat2} />
        <mesh
          geometry={nodes.Cube005_3.geometry}
          material={materials.Window_Frame}
        />
        <mesh geometry={nodes.Cube005_4.geometry} material={materials.Mat4} />
        <mesh geometry={nodes.Cube005_5.geometry} material={materials.Mat3} />
        <mesh geometry={nodes.Cube005_6.geometry} material={materials.Window} />
      </group>
    </>,
    ...[...Array(targetAmount)].map((_, index) => {
      const [x, y, z] = targetPositions[index];
      return (
        <mesh
          position={[x, y, z]}
          ref={(ref) => (targets.current[index] = ref)}
          key={index}
        >
          <boxGeometry args={[1]} />
          <meshBasicMaterial color={selected - 1 === index ? "blue" : "red"} />
        </mesh>
      );
    }),
  ];
}

useGLTF.preload(
  "https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/low-poly-spaceship/model.gltf"
);
